'use strict';require('ts-jest').install();"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var constants = require("../constants");
var Api_1 = require("../api/Api");
exports.doLogin = function (username, password) {
    return function (dispatch, getState) {
        dispatch(requestingToServer());
        var api = new Api_1.default(getState, dispatch);
        api.getFetch('', { username: username, password: password }).
        then(function (response) {
            dispatch(loginSuccess({ name: 'hitesh', id: 1 }, 'Login Success', false, 'sadsadas'));
        }).catch(function (response) {
            dispatch(loginFail({}, 'Login fail', true, []));
            console.log('TEST');
            ///dispatch("push('')");
            ///dispatch(push('/dashboard'));
        });
    };
};
function loginSuccess(user, message, isError, token) {
    return {
        type: constants.LOGIN_SUCCESS,
        user: user,
        isError: isError,
        message: message,
        token: token };

}
exports.loginSuccess = loginSuccess;
function loginFail(user, message, isError, errors) {
    return {
        type: constants.LOGIN_FAIL,
        user: user,
        isError: isError,
        message: message,
        errors: errors };

}
exports.loginFail = loginFail;
function requestingToServer() {
    return {
        type: constants.REQUESTING_TO_SERVER };

}
exports.requestingToServer = requestingToServer;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSx3QkFBMEM7QUFDMUMsb0JBQTZCO0FBaUNkLFFBQUEsQUFBTyxVQUFHLFVBQUMsQUFBZSxVQUFDLEFBQWU7QUFDdkQsQUFBTSxXQUFFLFVBQUMsQUFBaUIsVUFBRSxBQUFpQjtBQUd2QyxBQUFRLGlCQUFDLEFBQWtCLEFBQUUsQUFBQyxBQUFDO0FBRS9CLFlBQUksQUFBRyxNQUFHLElBQUksTUFBRyxRQUFDLEFBQVEsVUFBQyxBQUFRLEFBQUMsQUFBQztBQUV0QyxBQUFHLFlBQUMsQUFBUSxTQUFDLEFBQUUsSUFBQyxFQUFDLEFBQVEsVUFBQyxBQUFRLFVBQUMsQUFBUSxVQUFDLEFBQVEsQUFBQyxBQUFDO0FBQ25ELEFBQUksYUFBQyxVQUFTLEFBQVk7QUFHN0IsQUFBUSxxQkFBQyxBQUFZLGFBQUMsRUFBQyxBQUFJLE1BQUMsQUFBUSxVQUFDLEFBQUUsSUFBQyxBQUFDLEFBQUMsS0FBQyxBQUFlLGlCQUFDLEFBQUssT0FBQyxBQUFVLEFBQUMsQUFBQyxBQUFDLEFBRS9FO0FBQUMsQUFBQyxXQUFDLEFBQUssTUFBQyxVQUFTLEFBQVk7QUFFN0IsQUFBUSxxQkFBQyxBQUFTLFVBQUMsQUFBRSxJQUFDLEFBQVksY0FBQyxBQUFJLE1BQUMsQUFBRSxBQUFDLEFBQUMsQUFBQztBQUMxQyxBQUFPLG9CQUFDLEFBQUcsSUFBQyxBQUFNLEFBQUMsQUFBQztBQUNwQixBQUF3QjtBQUN6QixBQUFnQyxBQUVuQztBQUFDLEFBQUMsQUFBQyxBQUVQO0FBQUMsQUFDSDtBQUFDO0FBWUQsc0JBQTZCLEFBQVcsTUFBQyxBQUFjLFNBQUMsQUFBZSxTQUFDLEFBQVk7QUFFaEYsQUFBTSxXQUFDO0FBQ0gsQUFBSSxjQUFFLEFBQVMsVUFBQyxBQUFhO0FBQzdCLEFBQUksY0FBQyxBQUFJO0FBQ1QsQUFBTyxpQkFBQyxBQUFPO0FBQ2YsQUFBTyxpQkFBQyxBQUFPO0FBQ2YsQUFBSyxlQUFDLEFBQUssQUFDZCxBQUNMOztBQUFDO0FBVEQsdUJBU0M7QUFXRCxtQkFBMEIsQUFBVyxNQUFDLEFBQWMsU0FBQyxBQUFlLFNBQUMsQUFBb0I7QUFFckYsQUFBTSxXQUFDO0FBQ0gsQUFBSSxjQUFFLEFBQVMsVUFBQyxBQUFVO0FBQzFCLEFBQUksY0FBQyxBQUFJO0FBQ1QsQUFBTyxpQkFBQyxBQUFPO0FBQ2YsQUFBTyxpQkFBQyxBQUFPO0FBQ2YsQUFBTSxnQkFBQyxBQUFNLEFBQ2hCLEFBQ0w7O0FBQUM7QUFURCxvQkFTQztBQVVEO0FBRUMsQUFBTSxXQUFDO0FBRU4sQUFBSSxjQUFDLEFBQVMsVUFBQyxBQUFvQixBQUNuQyxBQUNGOztBQUFDO0FBTkQsNkJBTUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBjb25zdGFudHMgZnJvbSAnLi4vY29uc3RhbnRzJztcbmltcG9ydCBBcGkgZnJvbSAnLi4vYXBpL0FwaSc7XG4vLyBpbXBvcnQge3B1c2h9IGZyb20gJ2Nvbm5lY3RlZC1yZWFjdC1yb3V0ZXInO1xuXG4vLyBpbXBvcnQgeyBBY3Rpb25DcmVhdG9yIH0gZnJvbSAncmVkdXgnO1xuXG4vLyBleHBvcnQgaW50ZXJmYWNlIEluY3JlbWVudEVudGh1c2lhc20ge1xuLy8gICAgIHR5cGU6IGNvbnN0YW50cy5JTkNSRU1FTlRfRU5USFVTSUFTTTtcbi8vIH1cblxuLy8gZXhwb3J0IGludGVyZmFjZSBEZWNyZW1lbnRFbnRodXNpYXNtIHtcbi8vICAgICB0eXBlOiBjb25zdGFudHMuREVDUkVNRU5UX0VOVEhVU0lBU007XG4vLyB9XG5cbi8vIGV4cG9ydCB0eXBlIEVudGh1c2lhc21BY3Rpb24gPSBJbmNyZW1lbnRFbnRodXNpYXNtIHwgRGVjcmVtZW50RW50aHVzaWFzbTtcblxuLy8gZXhwb3J0IGZ1bmN0aW9uIGluY3JlbWVudEVudGh1c2lhc20oKTogSW5jcmVtZW50RW50aHVzaWFzbSB7XG4vLyAgICAgcmV0dXJuIHtcbi8vICAgICAgICAgdHlwZTogY29uc3RhbnRzLklOQ1JFTUVOVF9FTlRIVVNJQVNNXG4vLyAgICAgfVxuLy8gfVxuXG4vLyBleHBvcnQgZnVuY3Rpb24gZGVjcmVtZW50RW50aHVzaWFzbSgpOiBEZWNyZW1lbnRFbnRodXNpYXNtIHtcbi8vICAgICByZXR1cm4ge1xuLy8gICAgICAgICB0eXBlOiBjb25zdGFudHMuREVDUkVNRU5UX0VOVEhVU0lBU01cbi8vICAgICB9XG4vLyB9XG5cbmV4cG9ydCBpbnRlcmZhY2UgTG9naW5SZXF1ZXN0IHtcblxuXHR0eXBlOmNvbnN0YW50cy5MT0dJTl9SRVFVRVNUXG59XG5cblxuZXhwb3J0ICBjb25zdCAgZG9Mb2dpbiA9ICh1c2VybmFtZTpzdHJpbmcscGFzc3dvcmQ6c3RyaW5nKTogYW55ID0+IHtcbiAgcmV0dXJuICAoZGlzcGF0Y2g6RnVuY3Rpb24sIGdldFN0YXRlOkZ1bmN0aW9uKSA9PiB7XG5cblxuICAgICAgICBkaXNwYXRjaChyZXF1ZXN0aW5nVG9TZXJ2ZXIoKSk7XG5cbiAgICAgICAgbGV0IGFwaSA9IG5ldyBBcGkoZ2V0U3RhdGUsZGlzcGF0Y2gpO1xuICAgICAgXHRcdFxuICAgICAgXHRhcGkuZ2V0RmV0Y2goJycse3VzZXJuYW1lOnVzZXJuYW1lLHBhc3N3b3JkOnBhc3N3b3JkfSlcbiAgICAgIFx0XHRcdC50aGVuKGZ1bmN0aW9uKHJlc3BvbnNlOmFueSl7XG5cbiAgICBcdFx0XG4gICAgXHRcdFx0ZGlzcGF0Y2gobG9naW5TdWNjZXNzKHtuYW1lOidoaXRlc2gnLGlkOjF9LCdMb2dpbiBTdWNjZXNzJyxmYWxzZSwnc2Fkc2FkYXMnKSk7XG5cbiAgICBcdFx0fSkuY2F0Y2goZnVuY3Rpb24ocmVzcG9uc2U6YW55KXtcblxuICAgIFx0XHRcdGRpc3BhdGNoKGxvZ2luRmFpbCh7fSwnTG9naW4gZmFpbCcsdHJ1ZSxbXSkpO1xuICAgICAgICAgIGNvbnNvbGUubG9nKCdURVNUJyk7XG4gICAgICAgICAgLy8vZGlzcGF0Y2goXCJwdXNoKCcnKVwiKTtcbiAgICAgICAgIC8vL2Rpc3BhdGNoKHB1c2goJy9kYXNoYm9hcmQnKSk7XG5cbiAgICBcdFx0fSk7XG5cbiAgfVxufVxuXG5cbmV4cG9ydCBpbnRlcmZhY2UgTG9naW5TdWNjZXNzIHtcblxuXHR0eXBlOmNvbnN0YW50cy5MT0dJTl9TVUNDRVNTO1xuXHR1c2VyOk9iamVjdDtcblx0aXNFcnJvcjpib29sZWFuO1xuXHRtZXNzYWdlOnN0cmluZztcblx0dG9rZW46c3RyaW5nO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbG9naW5TdWNjZXNzKHVzZXI6T2JqZWN0LG1lc3NhZ2U6c3RyaW5nLGlzRXJyb3I6Ym9vbGVhbix0b2tlbjpzdHJpbmcpOiBMb2dpblN1Y2Nlc3Mge1xuICAgIFxuICAgIHJldHVybiB7XG4gICAgICAgIHR5cGU6IGNvbnN0YW50cy5MT0dJTl9TVUNDRVNTLFxuICAgICAgICB1c2VyOnVzZXIsXG4gICAgICAgIGlzRXJyb3I6aXNFcnJvcixcbiAgICAgICAgbWVzc2FnZTptZXNzYWdlLFxuICAgICAgICB0b2tlbjp0b2tlblxuICAgIH1cbn1cblxuZXhwb3J0IGludGVyZmFjZSBMb2dpbkZhaWwge1xuXG5cdHR5cGU6Y29uc3RhbnRzLkxPR0lOX0ZBSUw7XG5cdHVzZXI6T2JqZWN0O1xuXHRpc0Vycm9yOmJvb2xlYW47XG5cdG1lc3NhZ2U6c3RyaW5nO1xuXHRlcnJvcnM6QXJyYXk8T2JqZWN0Pjtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGxvZ2luRmFpbCh1c2VyOk9iamVjdCxtZXNzYWdlOnN0cmluZyxpc0Vycm9yOmJvb2xlYW4sZXJyb3JzOkFycmF5PE9iamVjdD4pOiBMb2dpbkZhaWwge1xuICAgIFxuICAgIHJldHVybiB7XG4gICAgICAgIHR5cGU6IGNvbnN0YW50cy5MT0dJTl9GQUlMLFxuICAgICAgICB1c2VyOnVzZXIsXG4gICAgICAgIGlzRXJyb3I6aXNFcnJvcixcbiAgICAgICAgbWVzc2FnZTptZXNzYWdlLFxuICAgICAgICBlcnJvcnM6ZXJyb3JzXG4gICAgfVxufVxuXG4vLyBHbG9iYWwgQWN0aW9uIGZvciB0aGUgU2VydmVyIFJlcXVlc3RcblxuXG5leHBvcnQgaW50ZXJmYWNlIFJlcXVlc3RpbmdUb1NlcnZlciB7XG5cblx0dHlwZTpjb25zdGFudHMuUkVRVUVTVElOR19UT19TRVJWRVJcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJlcXVlc3RpbmdUb1NlcnZlcigpOiBSZXF1ZXN0aW5nVG9TZXJ2ZXJ7XG5cblx0cmV0dXJuIHtcblxuXHRcdHR5cGU6Y29uc3RhbnRzLlJFUVVFU1RJTkdfVE9fU0VSVkVSXG5cdH1cbn1cblxuXG5cblxuZXhwb3J0IHR5cGUgQXBwQWN0aW9uID0gTG9naW5SZXF1ZXN0IHwgTG9naW5TdWNjZXNzIHwgTG9naW5GYWlsIHwgUmVxdWVzdGluZ1RvU2VydmVyOyJdfQ==