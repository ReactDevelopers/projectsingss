'use strict';require('ts-jest').install();"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var constants = require("../constants");
var Api_1 = require("../api/Api");
var Auth_1 = require("../Auth");
var connected_react_router_1 = require("connected-react-router");
var helper_1 = require("../helper");
exports.doLogin = function (username, password) {
    return function (dispatch, getState) {
        dispatch(requestingToServer());
        var api = new Api_1.default(getState, dispatch);
        var auth = new Auth_1.default();
        var device_id = auth.guid();
        var option = {};
        var body = { username: username, password: password, device_id: device_id };
        option['body'] = body;
        api.getFetch('login-action', option).
        then(function (response) {
            console.log(response);
            if (response.status) {
                var user_1 = response.data.user;
                console.log("user");
                console.log(user_1);
                dispatch(loginSuccess(user_1, response.message, response.data.token));
                auth.setToken(response.data.token, device_id);
                dispatch(connected_react_router_1.push(helper_1.default('/dashboard')));
            } else
            {
                dispatch(loginFail(response.message, true, response.errors));
            }
        }).catch(function (response) {
            console.log("response");
            console.log(response);
            dispatch(loginFail(response.message, true, response.errors));
        });
    };
};
function loginSuccess(user, message, token) {
    return {
        type: constants.LOGIN_SUCCESS,
        user: user,
        message: message,
        token: token };

}
exports.loginSuccess = loginSuccess;
function loginFail(message, isError, errors) {
    return {
        type: constants.LOGIN_FAIL,
        isError: isError,
        message: message,
        errors: errors };

}
exports.loginFail = loginFail;
function requestingToServer() {
    return {
        type: constants.REQUESTING_TO_SERVER };

}
exports.requestingToServer = requestingToServer;
function getUserProfileAction(user) {
    return {
        type: constants.USER_PROFILE,
        user: user };

}
exports.getUserProfileAction = getUserProfileAction;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTG9naW5BY3Rpb24uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJMb2dpbkFjdGlvbi50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSx3QkFBMEM7QUFDMUMsb0JBQTZCO0FBQzdCLHFCQUEyQjtBQUMzQix1Q0FBNEM7QUFDNUMsdUJBQStCO0FBNEJoQixRQUFBLEFBQU8sVUFBRyxVQUFDLEFBQWUsVUFBQyxBQUFlO0FBQ3ZELEFBQU0sV0FBRSxVQUFDLEFBQWlCLFVBQUUsQUFBaUI7QUFFdkMsQUFBUSxpQkFBQyxBQUFrQixBQUFFLEFBQUMsQUFBQztBQUUvQixZQUFJLEFBQUcsTUFBRyxJQUFJLE1BQUcsUUFBQyxBQUFRLFVBQUMsQUFBUSxBQUFDLEFBQUM7QUFDdEMsWUFBSSxBQUFJLE9BQUcsSUFBSSxPQUFJLEFBQUUsQUFBQztBQUNyQixZQUFJLEFBQVMsWUFBRyxBQUFJLEtBQUMsQUFBSSxBQUFFLEFBQUM7QUFFNUIsWUFBSyxBQUFNLFNBQUUsQUFBRSxBQUFDO0FBRWhCLFlBQUksQUFBSSxPQUFVLEVBQUMsQUFBUSxVQUFDLEFBQVEsVUFBQyxBQUFRLFVBQUMsQUFBUSxVQUFDLEFBQVMsV0FBQyxBQUFTLEFBQUMsQUFBQztBQUU1RSxBQUFNLGVBQUMsQUFBTSxBQUFDLFVBQUcsQUFBSSxBQUFDO0FBRXZCLEFBQUcsWUFBQyxBQUFRLFNBQUMsQUFBYyxnQkFBQyxBQUFNLEFBQUM7QUFDaEMsQUFBSSxhQUFDLFVBQVMsQUFBNkI7QUFFekMsQUFBTyxvQkFBQyxBQUFHLElBQUMsQUFBUSxBQUFDLEFBQUM7QUFDdEIsQUFBRSxnQkFBQyxBQUFRLFNBQUMsQUFBTSxBQUFDLFFBQUEsQUFBQztBQUVsQixvQkFBSSxBQUFJLFNBQUcsQUFBUSxTQUFDLEFBQUksS0FBQyxBQUFJLEFBQUM7QUFDOUIsQUFBTyx3QkFBQyxBQUFHLElBQUMsQUFBTSxBQUFDLEFBQUM7QUFDcEIsQUFBTyx3QkFBQyxBQUFHLElBQUMsQUFBSSxBQUFDLEFBQUM7QUFDckIsQUFBUSx5QkFBQyxBQUFZLGFBQUMsQUFBSSxRQUFDLEFBQVEsU0FBQyxBQUFPLFNBQUMsQUFBUSxTQUFDLEFBQUksS0FBQyxBQUFLLEFBQUMsQUFBQyxBQUFDO0FBQy9ELEFBQUkscUJBQUMsQUFBUSxTQUFDLEFBQVEsU0FBQyxBQUFJLEtBQUMsQUFBSyxPQUFDLEFBQVMsQUFBQyxBQUFDO0FBQzdDLEFBQVEseUJBQUMseUJBQUksS0FBQyxTQUFNLFFBQUMsQUFBWSxBQUFDLEFBQUMsQUFBQyxBQUFDLEFBR3ZDO0FBQUMsQUFBSTtBQUFBLEFBQUM7QUFFRixBQUFRLHlCQUFDLEFBQVMsVUFBQyxBQUFRLFNBQUMsQUFBTyxTQUFDLEFBQUksTUFBQyxBQUFRLFNBQUMsQUFBTSxBQUFDLEFBQUMsQUFBQyxBQUMvRDtBQUFDLEFBRVA7QUFBQyxBQUFDLFdBQUMsQUFBSyxNQUFDLFVBQVMsQUFBMEI7QUFDeEMsQUFBTyxvQkFBQyxBQUFHLElBQUMsQUFBVSxBQUFDLEFBQUM7QUFDeEIsQUFBTyxvQkFBQyxBQUFHLElBQUMsQUFBUSxBQUFDLEFBQUM7QUFDekIsQUFBUSxxQkFBQyxBQUFTLFVBQUMsQUFBUSxTQUFDLEFBQU8sU0FBQyxBQUFJLE1BQUMsQUFBUSxTQUFDLEFBQU0sQUFBQyxBQUFDLEFBQUMsQUFFNUQ7QUFBQyxBQUFDLEFBQUMsQUFFUDtBQUFDLEFBQ0g7QUFBQztBQVdELHNCQUE2QixBQUFTLE1BQUMsQUFBYyxTQUFDLEFBQVk7QUFFOUQsQUFBTSxXQUFDO0FBQ0gsQUFBSSxjQUFFLEFBQVMsVUFBQyxBQUFhO0FBQzdCLEFBQUksY0FBQyxBQUFJO0FBQ1QsQUFBTyxpQkFBQyxBQUFPO0FBQ2YsQUFBSyxlQUFDLEFBQUssQUFDZCxBQUNMOztBQUFDO0FBUkQsdUJBUUM7QUFVRCxtQkFBMEIsQUFBYyxTQUFDLEFBQWUsU0FBQyxBQUFvQjtBQUV6RSxBQUFNLFdBQUM7QUFDSCxBQUFJLGNBQUUsQUFBUyxVQUFDLEFBQVU7QUFDMUIsQUFBTyxpQkFBQyxBQUFPO0FBQ2YsQUFBTyxpQkFBQyxBQUFPO0FBQ2YsQUFBTSxnQkFBQyxBQUFNLEFBQ2hCLEFBQ0w7O0FBQUM7QUFSRCxvQkFRQztBQVVEO0FBRUMsQUFBTSxXQUFDO0FBRU4sQUFBSSxjQUFDLEFBQVMsVUFBQyxBQUFvQixBQUNuQyxBQUNGOztBQUFDO0FBTkQsNkJBTUM7QUFRRCw4QkFBcUMsQUFBUztBQUU1QyxBQUFNLFdBQUM7QUFFTCxBQUFJLGNBQUMsQUFBUyxVQUFDLEFBQVk7QUFDM0IsQUFBSSxjQUFDLEFBQUksQUFDVixBQUNIOztBQUFDO0FBUEQsK0JBT0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBjb25zdGFudHMgZnJvbSAnLi4vY29uc3RhbnRzJztcbmltcG9ydCBBcGkgZnJvbSAnLi4vYXBpL0FwaSc7XG5pbXBvcnQgQXV0aCBmcm9tICcuLi9BdXRoJztcbmltcG9ydCB7cHVzaH0gZnJvbSAnY29ubmVjdGVkLXJlYWN0LXJvdXRlcic7XG5pbXBvcnQgYXBwVXJsIGZyb20gJy4uL2hlbHBlcic7XG5pbXBvcnQgdXNlciBmcm9tICcuLi9tb2RhbHMvdXNlcic7XG5cbmV4cG9ydCBpbnRlcmZhY2UgTG9naW5SZXF1ZXN0IHtcblxuXHR0eXBlOmNvbnN0YW50cy5MT0dJTl9SRVFVRVNUXG59XG5cblxuaW50ZXJmYWNlIGxvZ2luU3VjY2Vzc1Jlc3BvbnNle1xuXG4gIG1lc3NhZ2U6IHN0cmluZztcbiAgc3RhdHVzOmJvb2xlYW47XG4gIGVycm9yX2NvZGU6c3RyaW5nO1xuICBlcnJvcnM6IEFycmF5PE9iamVjdD47XG4gIGRhdGE6e1xuICAgIHVzZXI6dXNlcixcbiAgICB0b2tlbjpzdHJpbmcsXG4gIH1cbn1cbmludGVyZmFjZSBsb2dpbkZhaWxSZXNwb25zZXtcblxuICBtZXNzYWdlOiBzdHJpbmc7XG4gIHN0YXR1czpib29sZWFuO1xuICBlcnJvcl9jb2RlOnN0cmluZztcbiAgZXJyb3JzOiBBcnJheTxPYmplY3Q+O1xufVxuXG5leHBvcnQgIGNvbnN0ICBkb0xvZ2luID0gKHVzZXJuYW1lOnN0cmluZyxwYXNzd29yZDpzdHJpbmcpOiBhbnkgPT4ge1xuICByZXR1cm4gIChkaXNwYXRjaDpGdW5jdGlvbiwgZ2V0U3RhdGU6RnVuY3Rpb24pID0+IHtcblxuICAgICAgICBkaXNwYXRjaChyZXF1ZXN0aW5nVG9TZXJ2ZXIoKSk7XG5cbiAgICAgICAgbGV0IGFwaSA9IG5ldyBBcGkoZ2V0U3RhdGUsZGlzcGF0Y2gpO1xuICAgICAgXHRsZXQgYXV0aCA9IG5ldyBBdXRoKCk7XG4gICAgICAgIGxldCBkZXZpY2VfaWQgPSBhdXRoLmd1aWQoKTtcblxuICAgICAgICBsZXQgIG9wdGlvbiA9e307XG5cbiAgICAgICAgbGV0IGJvZHk6b2JqZWN0ID0ge3VzZXJuYW1lOnVzZXJuYW1lLHBhc3N3b3JkOnBhc3N3b3JkLGRldmljZV9pZDpkZXZpY2VfaWR9O1xuXG4gICAgICAgIG9wdGlvblsnYm9keSddID0gYm9keTtcblxuICAgICAgXHRhcGkuZ2V0RmV0Y2goJ2xvZ2luLWFjdGlvbicsb3B0aW9uKVxuICAgICAgXHRcdFx0LnRoZW4oZnVuY3Rpb24ocmVzcG9uc2U6bG9naW5TdWNjZXNzUmVzcG9uc2Upe1xuXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhyZXNwb25zZSk7XG4gICAgICAgICAgICBpZihyZXNwb25zZS5zdGF0dXMpeyAgXG5cbiAgICAgICAgICAgICAgbGV0IHVzZXIgPSByZXNwb25zZS5kYXRhLnVzZXI7XG4gICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwidXNlclwiKTtcbiAgICAgICAgICAgICAgY29uc29sZS5sb2codXNlcik7XG4gICAgICAgIFx0XHRcdGRpc3BhdGNoKGxvZ2luU3VjY2Vzcyh1c2VyLHJlc3BvbnNlLm1lc3NhZ2UscmVzcG9uc2UuZGF0YS50b2tlbikpO1xuICAgICAgICAgICAgICBhdXRoLnNldFRva2VuKHJlc3BvbnNlLmRhdGEudG9rZW4sZGV2aWNlX2lkKTtcbiAgICAgICAgICAgICAgZGlzcGF0Y2gocHVzaChhcHBVcmwoJy9kYXNoYm9hcmQnKSkpO1xuXG5cbiAgICAgICAgICAgIH1lbHNle1xuXG4gICAgICAgICAgICAgICAgZGlzcGF0Y2gobG9naW5GYWlsKHJlc3BvbnNlLm1lc3NhZ2UsdHJ1ZSxyZXNwb25zZS5lcnJvcnMpKTtcbiAgICAgICAgICAgIH1cblxuICAgIFx0XHR9KS5jYXRjaChmdW5jdGlvbihyZXNwb25zZTpsb2dpbkZhaWxSZXNwb25zZSl7XG4gICAgICAgICAgY29uc29sZS5sb2coXCJyZXNwb25zZVwiKTtcbiAgICAgICAgICBjb25zb2xlLmxvZyhyZXNwb25zZSk7XG4gICAgXHRcdFx0ZGlzcGF0Y2gobG9naW5GYWlsKHJlc3BvbnNlLm1lc3NhZ2UsdHJ1ZSxyZXNwb25zZS5lcnJvcnMpKTsgICAgICAgICAgXG5cbiAgICBcdFx0fSk7XG5cbiAgfVxufVxuXG5cbmV4cG9ydCBpbnRlcmZhY2UgTG9naW5TdWNjZXNzIHtcblxuXHR0eXBlOmNvbnN0YW50cy5MT0dJTl9TVUNDRVNTO1xuXHR1c2VyOnVzZXI7XG5cdG1lc3NhZ2U6c3RyaW5nO1xuXHR0b2tlbjpzdHJpbmc7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBsb2dpblN1Y2Nlc3ModXNlcjp1c2VyLG1lc3NhZ2U6c3RyaW5nLHRva2VuOnN0cmluZyk6IExvZ2luU3VjY2VzcyB7XG4gICAgXG4gICAgcmV0dXJuIHtcbiAgICAgICAgdHlwZTogY29uc3RhbnRzLkxPR0lOX1NVQ0NFU1MsXG4gICAgICAgIHVzZXI6dXNlcixcbiAgICAgICAgbWVzc2FnZTptZXNzYWdlLFxuICAgICAgICB0b2tlbjp0b2tlblxuICAgIH1cbn1cblxuZXhwb3J0IGludGVyZmFjZSBMb2dpbkZhaWwge1xuXG5cdHR5cGU6Y29uc3RhbnRzLkxPR0lOX0ZBSUw7XG5cdGlzRXJyb3I6Ym9vbGVhbjtcblx0bWVzc2FnZTpzdHJpbmc7XG5cdGVycm9yczpBcnJheTxPYmplY3Q+O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbG9naW5GYWlsKG1lc3NhZ2U6c3RyaW5nLGlzRXJyb3I6Ym9vbGVhbixlcnJvcnM6QXJyYXk8T2JqZWN0Pik6IExvZ2luRmFpbCB7XG4gICAgXG4gICAgcmV0dXJuIHtcbiAgICAgICAgdHlwZTogY29uc3RhbnRzLkxPR0lOX0ZBSUwsXG4gICAgICAgIGlzRXJyb3I6aXNFcnJvcixcbiAgICAgICAgbWVzc2FnZTptZXNzYWdlLFxuICAgICAgICBlcnJvcnM6ZXJyb3JzXG4gICAgfVxufVxuXG4vLyBHbG9iYWwgQWN0aW9uIGZvciB0aGUgU2VydmVyIFJlcXVlc3RcblxuXG5leHBvcnQgaW50ZXJmYWNlIFJlcXVlc3RpbmdUb1NlcnZlciB7XG5cblx0dHlwZTpjb25zdGFudHMuUkVRVUVTVElOR19UT19TRVJWRVJcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJlcXVlc3RpbmdUb1NlcnZlcigpOiBSZXF1ZXN0aW5nVG9TZXJ2ZXJ7XG5cblx0cmV0dXJuIHtcblxuXHRcdHR5cGU6Y29uc3RhbnRzLlJFUVVFU1RJTkdfVE9fU0VSVkVSXG5cdH1cbn1cblxuZXhwb3J0IGludGVyZmFjZSBHZXRVc2VyUHJvZmlsZSB7XG5cbiAgdHlwZTpjb25zdGFudHMuVVNFUl9QUk9GSUxFO1xuICB1c2VyOnVzZXI7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRVc2VyUHJvZmlsZUFjdGlvbih1c2VyOnVzZXIpOiBHZXRVc2VyUHJvZmlsZXtcblxuICByZXR1cm4ge1xuXG4gICAgdHlwZTpjb25zdGFudHMuVVNFUl9QUk9GSUxFLFxuICAgIHVzZXI6dXNlclxuICB9XG59XG5cbmV4cG9ydCB0eXBlIExvZ2luQWN0aW9uID0gTG9naW5SZXF1ZXN0IHwgTG9naW5TdWNjZXNzIHwgTG9naW5GYWlsIHwgUmVxdWVzdGluZ1RvU2VydmVyIHwgR2V0VXNlclByb2ZpbGU7Il19